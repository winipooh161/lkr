<?php

require_once 'vendor/autoload.php';

use App\Http\Controllers\Partner\ProjectDocuments\ActFlIpController;
use App\Models\Project;
use App\Models\User;
use Illuminate\Http\Request;

echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DOCX...\n\n";

// –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã
$mockProject = new class {
    public $id = 123;
    public $name = '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç';
    public $description = '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞';
    public $address = '–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1';
    public $cost = 50000;
    public $contractor_type = '–∏–ø';
    public $created_at;
    
    public function __construct() {
        $this->created_at = now();
    }
    
    public function executor() {
        return new class {
            public function first() {
                return new class {
                    public $name = '–ò–ü –ò–≤–∞–Ω–æ–≤';
                    public $inn = '123456789012';
                    public $ogrn = '123456789012345';
                    public $address = '–ú–æ—Å–∫–≤–∞, —É–ª. –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –¥. 1';
                };
            }
        };
    }
    
    public function client() {
        return new class {
            public function first() {
                return new class {
                    public $name = '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á';
                    public $passport_series = '1234';
                    public $passport_number = '567890';
                    public $passport_issued_by = '–û–í–î –¢–µ—Å—Ç–æ–≤–æ–µ';
                    public $passport_issued_at = '2010-01-01';
                    public $passport_code = '123-456';
                };
            }
        };
    }
};

// –°–æ–∑–¥–∞–µ–º mock Request
$mockRequest = new class {
    private $data = [
        'format' => 'docx',
        'include_signature' => false,
        'include_stamp' => false
    ];
    
    public function validate($rules) {
        return true;
    }
    
    public function input($key, $default = null) {
        return $this->data[$key] ?? $default;
    }
};

try {
    echo "1. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä...\n";
    $controller = new ActFlIpController();
    
    echo "2. –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞...\n";
    $response = $controller->generate($mockRequest, $mockProject);
    
    echo "3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...\n";
    if ($response instanceof \Illuminate\Http\JsonResponse) {
        $data = $response->getData(true);
        if (isset($data['error'])) {
            echo "‚ùå –û–®–ò–ë–ö–ê: " . $data['error'] . "\n";
            if (isset($data['suggestion'])) {
                echo "üí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï: " . $data['suggestion'] . "\n";
            }
        } else {
            echo "‚úÖ –£–°–ü–ï–•: JSON –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω\n";
        }
    } elseif ($response instanceof \Symfony\Component\HttpFoundation\BinaryFileResponse) {
        echo "‚úÖ –£–°–ü–ï–•: –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é\n";
        echo "üìÑ –ò–º—è —Ñ–∞–π–ª–∞: " . $response->getFile()->getFilename() . "\n";
        echo "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " . filesize($response->getFile()->getPathname()) . " –±–∞–π—Ç\n";
    } else {
        echo "‚úÖ –£–°–ü–ï–•: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (—Ç–∏–ø: " . get_class($response) . ")\n";
    }
    
} catch (\Exception $e) {
    echo "‚ùå –û–®–ò–ë–ö–ê: " . $e->getMessage() . "\n";
    echo "üìç –§–∞–π–ª: " . $e->getFile() . ":" . $e->getLine() . "\n";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    $trace = $e->getTrace();
    echo "\nüìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ (–ø–µ—Ä–≤—ã–µ 3 –≤—ã–∑–æ–≤–∞):\n";
    for ($i = 0; $i < min(3, count($trace)); $i++) {
        $item = $trace[$i];
        echo "  " . ($i + 1) . ". " . ($item['file'] ?? 'unknown') . ":" . ($item['line'] ?? 'unknown') 
             . " -> " . ($item['class'] ?? '') . ($item['type'] ?? '') . ($item['function'] ?? '') . "\n";
    }
}

echo "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
