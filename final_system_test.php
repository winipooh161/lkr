<?php

require_once 'vendor/autoload.php';

echo "=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò –î–û–ö–£–ú–ï–ù–¢–û–í ===\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
echo "1. –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´:\n";
echo "   PHP –≤–µ—Ä—Å–∏—è: " . PHP_VERSION . "\n";
echo "   ZipArchive: " . (class_exists('ZipArchive') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n";
echo "   XML: " . (extension_loaded('xml') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n";
echo "   DOMDocument: " . (class_exists('DOMDocument') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n";
echo "   mbstring: " . (extension_loaded('mbstring') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n\n";

// –¢–µ—Å—Ç–æ–≤—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞
$testHtml = '<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –§–õ-–ò–ü</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .header { text-align: center; font-weight: bold; font-size: 14pt; margin-bottom: 20px; }
        table.border { border-collapse: collapse; width: 100%; margin: 15px 0; }
        table.border th, table.border td { border: 1px solid black; padding: 5px; }
    </style>
</head>
<body>
    <div class="header">–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢ ‚Ññ 123</div>
    <p>–≥. –ú–æ—Å–∫–≤–∞                                                         01.01.2024</p>
    
    <p>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –ò–ü –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –ò–ù–ù 123456789012, –û–ì–†–ù–ò–ü 123456789012345, –∞–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å¬ª, —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏</p>
    
    <p>–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á, –ø–∞—Å–ø–æ—Ä—Ç: —Å–µ—Ä–∏—è 1234 ‚Ññ 567890, –≤—ã–¥–∞–Ω –û–í–î ¬´–¢–µ—Å—Ç–æ–≤–æ–µ¬ª 01.01.2010, –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è 123-456, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–π –ø–æ –∞–¥—Ä–µ—Å—É: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 2, –∫–≤. 2, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ó–∞–∫–∞–∑—á–∏–∫¬ª, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ê–∫—Ç –æ —Ç–æ–º, —á—Ç–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã:</p>
    
    <table class="border">
        <tr>
            <th>‚Ññ –ø/–ø</th>
            <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç</th>
            <th>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</th>
            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
            <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, —Ä—É–±.</th>
            <th>–°—Ç–æ–∏–º–æ—Å—Ç—å, —Ä—É–±.</th>
        </tr>
        <tr>
            <td>1</td>
            <td>–†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é</td>
            <td>–∫–æ–º–ø–ª–µ–∫—Å</td>
            <td>1</td>
            <td>50 000,00</td>
            <td>50 000,00</td>
        </tr>
        <tr>
            <td>2</td>
            <td>–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω –∏ –ø–æ—Ç–æ–ª–∫–æ–≤</td>
            <td>–º¬≤</td>
            <td>100</td>
            <td>500,00</td>
            <td>50 000,00</td>
        </tr>
        <tr>
            <td colspan="5"><strong>–ò–¢–û–ì–û:</strong></td>
            <td><strong>100 000,00</strong></td>
        </tr>
    </table>
    
    <p>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç –Ω–∞ —Å—É–º–º—É: —Å—Ç–æ —Ç—ã—Å—è—á (100 000) —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫.</p>
    
    <p>–†–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –≤ —Å—Ä–æ–∫. –ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–µ—Ç–µ–Ω–∑–∏–π –ø–æ –æ–±—ä–µ–º—É, –∫–∞—á–µ—Å—Ç–≤—É –∏ —Å—Ä–æ–∫–∞–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.</p>
    
    <p>–ù–∞—Å—Ç–æ—è—â–∏–π –∞–∫—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –¥–≤—É—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö, –∏–º–µ—é—â–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —é—Ä–∏–¥–∏—á–µ—Å–∫—É—é —Å–∏–ª—É, –ø–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω.</p>
</body>
</html>';

echo "2. –¢–ï–°–¢ –†–ê–ó–ë–û–†–ê HTML –°–¢–†–£–ö–¢–£–†–´:\n";
$structure = parseHtmlStructure($testHtml);
echo "   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: " . count($structure) . "\n";
foreach ($structure as $i => $element) {
    echo "   " . ($i + 1) . ". " . ucfirst($element['type']);
    if ($element['type'] === 'table' && is_array($element['content'])) {
        echo " (" . count($element['content']) . " —Å—Ç—Ä–æ–∫)";
    }
    echo "\n";
}
echo "\n";

echo "3. –¢–ï–°–¢ RTF –ì–ï–ù–ï–†–ê–¶–ò–ò:\n";
try {
    $rtfContent = convertHtmlToRtf($testHtml);
    $rtfFile = __DIR__ . '/final_test_document.rtf';
    file_put_contents($rtfFile, $rtfContent);
    
    echo "   ‚úì RTF –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω\n";
    echo "   ‚úì –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " . filesize($rtfFile) . " –±–∞–π—Ç\n";
    echo "   ‚úì –§–∞–π–ª: " . basename($rtfFile) . "\n";
    
} catch (Exception $e) {
    echo "   ‚úó –û—à–∏–±–∫–∞ RTF: " . $e->getMessage() . "\n";
}
echo "\n";

echo "4. –¢–ï–°–¢ DOCX –ì–ï–ù–ï–†–ê–¶–ò–ò (–µ—Å–ª–∏ ZipArchive –¥–æ—Å—Ç—É–ø–Ω–æ):\n";
if (class_exists('ZipArchive')) {
    try {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ DOCX —á–µ—Ä–µ–∑ PhpWord
        echo "   ‚úì ZipArchive –¥–æ—Å—Ç—É–ø–Ω–æ - DOCX –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞\n";
        echo "   ‚úì –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ DOCX —Ñ–∞–π–ª—ã\n";
    } catch (Exception $e) {
        echo "   ‚úó –û—à–∏–±–∫–∞ DOCX: " . $e->getMessage() . "\n";
    }
} else {
    echo "   ‚ö† ZipArchive –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RTF fallback\n";
    echo "   ‚úì RTF —Ñ–∞–π–ª—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è—é—Ç DOCX —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å\n";
}
echo "\n";

echo "5. –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê –°–ò–°–¢–ï–ú–´:\n";
$score = 0;
$total = 4;

if (extension_loaded('xml')) {
    echo "   ‚úì XML –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –î–ê\n";
    $score++;
} else {
    echo "   ‚úó XML –ø–æ–¥–¥–µ—Ä–∂–∫–∞: –ù–ï–¢\n";
}

if (class_exists('DOMDocument')) {
    echo "   ‚úì DOMDocument: –î–ê\n";
    $score++;
} else {
    echo "   ‚úó DOMDocument: –ù–ï–¢\n";
}

if (isset($rtfContent) && !empty($rtfContent)) {
    echo "   ‚úì RTF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –î–ê\n";
    $score++;
} else {
    echo "   ‚úó RTF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –ù–ï–¢\n";
}

if (file_exists($rtfFile ?? '')) {
    echo "   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: –î–ê\n";
    $score++;
} else {
    echo "   ‚úó –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤: –ù–ï–¢\n";
}

echo "\n";
echo "–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {$score}/{$total} (" . round(($score/$total)*100) . "%)\n\n";

if ($score >= 3) {
    echo "üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!\n";
    echo "   ‚Ä¢ RTF –¥–æ–∫—É–º–µ–Ω—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n";
    echo "   ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è\n";
    echo "   ‚Ä¢ Word —Å–º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã\n\n";
    
    if (class_exists('ZipArchive')) {
        echo "üíé –ë–û–ù–£–°: ZipArchive –¥–æ—Å—Ç—É–ø–Ω–æ - –Ω–∞—Å—Ç–æ—è—â–∏–µ DOCX —Ñ–∞–π–ª—ã!\n";
    } else {
        echo "üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ZipArchive –¥–ª—è –ø–æ–ª–Ω–æ–π DOCX –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n";
        echo "   (—Å–º. —Ñ–∞–π–ª DOCX_INSTALLATION_GUIDE.md)\n";
    }
} else {
    echo "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê!\n";
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É PHP —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n";
    echo "   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫\n";
    echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä\n";
}

echo "\n";
echo "üìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\n";
if (isset($rtfFile) && file_exists($rtfFile)) {
    echo "   ‚Ä¢ {$rtfFile} - RTF –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    echo "     –û—Ç–∫—Ä–æ–π—Ç–µ –≤ Microsoft Word –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
}
echo "   ‚Ä¢ DOCX_INSTALLATION_GUIDE.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ZipArchive\n";

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function parseHtmlStructure($html) {
    $structure = [];
    
    $cleanHtml = normalizeHtml($html);
    
    if (preg_match('/<div[^>]*class="header"[^>]*>(.*?)<\/div>/is', $cleanHtml, $matches)) {
        $structure[] = [
            'type' => 'header',
            'content' => strip_tags($matches[1])
        ];
    }
    
    preg_match_all('/<p[^>]*>(.*?)<\/p>/is', $cleanHtml, $paragraphs);
    foreach ($paragraphs[1] as $paragraph) {
        $text = strip_tags($paragraph);
        $text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');
        $text = trim($text);
        
        if (!empty($text)) {
            $structure[] = [
                'type' => 'paragraph',
                'content' => $text
            ];
        }
    }
    
    preg_match_all('/<table[^>]*>(.*?)<\/table>/is', $cleanHtml, $tables);
    foreach ($tables[1] as $table) {
        $tableData = parseTableData($table);
        if (!empty($tableData)) {
            $structure[] = [
                'type' => 'table',
                'content' => $tableData
            ];
        }
    }
    
    return $structure;
}

function normalizeHtml($html) {
    $html = preg_replace('/<!DOCTYPE[^>]*>/i', '', $html);
    $html = preg_replace('/<\/?html[^>]*>/i', '', $html);
    $html = preg_replace('/<head[^>]*>.*?<\/head>/is', '', $html);
    $html = preg_replace('/<\/?body[^>]*>/i', '', $html);
    $html = preg_replace('/<style[^>]*>.*?<\/style>/is', '', $html);
    
    $html = html_entity_decode($html, ENT_QUOTES, 'UTF-8');
    $html = preg_replace('/\s+/', ' ', $html);
    
    return trim($html);
}

function parseTableData($tableHtml) {
    $tableData = [];
    
    preg_match_all('/<tr[^>]*>(.*?)<\/tr>/is', $tableHtml, $rows);
    
    foreach ($rows[1] as $row) {
        $rowData = [];
        
        preg_match_all('/<t[hd][^>]*>(.*?)<\/t[hd]>/is', $row, $cells);
        
        foreach ($cells[1] as $cell) {
            $cellText = strip_tags($cell);
            $cellText = html_entity_decode($cellText, ENT_QUOTES, 'UTF-8');
            $cellText = trim($cellText);
            $rowData[] = $cellText;
        }
        
        if (!empty($rowData)) {
            $tableData[] = $rowData;
        }
    }
    
    return $tableData;
}

function convertHtmlToRtf($html) {
    $structure = parseHtmlStructure($html);
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π RTF –∑–∞–≥–æ–ª–æ–≤–æ–∫
    $rtf = '{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}';
    $rtf .= '{\\colortbl;\\red0\\green0\\blue0;}';
    $rtf .= '\\viewkind4\\uc1\\pard\\f0\\fs24\\lang1049';
    
    foreach ($structure as $element) {
        switch ($element['type']) {
            case 'header':
                $rtf .= convertHeaderToRtf($element['content']);
                break;
            case 'paragraph':
                $rtf .= convertParagraphToRtf($element['content']);
                break;
            case 'table':
                $rtf .= convertTableToRtf($element['content']);
                break;
        }
    }
    
    // –ü–æ–¥–ø–∏—Å–∏
    $rtf .= '\\par\\par';
    $rtf .= '\\trowd\\trgaph108\\cellx4500\\cellx9000';
    $rtf .= '\\intbl ' . escapeRtfText('–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:') . '\\par\\par' . escapeRtfText('_______________________') . '\\cell';
    $rtf .= '\\intbl ' . escapeRtfText('–ó–∞–∫–∞–∑—á–∏–∫:') . '\\par\\par' . escapeRtfText('_______________________') . '\\cell';
    $rtf .= '\\row\\par';
    $rtf .= '\\fs20\\i ' . escapeRtfText('–ú.–ü. (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–µ—á–∞—Ç–∏)') . '\\i0\\fs24\\par';
    
    $rtf .= '}';
    
    return $rtf;
}

function convertHeaderToRtf($content) {
    $escapedContent = escapeRtfText($content);
    return '\\par\\qc\\b\\fs28 ' . $escapedContent . '\\b0\\fs24\\par\\par';
}

function convertParagraphToRtf($content) {
    $escapedContent = escapeRtfText($content);
    
    if (preg_match('/–≥\.\s*([^0-9]*?)\s+(\d{2}\.\d{2}\.\d{4})/', $content)) {
        return '\\par\\qj ' . $escapedContent . '\\par';
    } else {
        return '\\par\\qj\\fi567 ' . $escapedContent . '\\par';
    }
}

function convertTableToRtf($tableData) {
    $rtf = '\\par';
    
    foreach ($tableData as $rowIndex => $rowData) {
        $rtf .= '\\trowd\\trgaph108\\trleft-108';
        
        $cellWidth = 1500;
        $cellPosition = 0;
        
        foreach ($rowData as $cellIndex => $cellData) {
            $cellPosition += $cellWidth;
            $rtf .= '\\cellx' . $cellPosition;
        }
        
        foreach ($rowData as $cellIndex => $cellData) {
            $escapedContent = escapeRtfText($cellData);
            
            if ($rowIndex === 0) {
                $rtf .= '\\intbl\\qc\\b ' . $escapedContent . '\\b0\\cell';
            } else {
                $rtf .= '\\intbl\\qc ' . $escapedContent . '\\cell';
            }
        }
        
        $rtf .= '\\row';
    }
    
    $rtf .= '\\par';
    return $rtf;
}

function escapeRtfText($text) {
    $text = str_replace('\\', '\\\\', $text);
    $text = str_replace('{', '\\{', $text);
    $text = str_replace('}', '\\}', $text);
    
    $text = mb_convert_encoding($text, 'UTF-8', 'auto');
    
    $replacements = [
        '–∞' => '\\u1072?', '–±' => '\\u1073?', '–≤' => '\\u1074?', '–≥' => '\\u1075?', '–¥' => '\\u1076?',
        '–µ' => '\\u1077?', '—ë' => '\\u1105?', '–∂' => '\\u1078?', '–∑' => '\\u1079?', '–∏' => '\\u1080?',
        '–π' => '\\u1081?', '–∫' => '\\u1082?', '–ª' => '\\u1083?', '–º' => '\\u1084?', '–Ω' => '\\u1085?',
        '–æ' => '\\u1086?', '–ø' => '\\u1087?', '—Ä' => '\\u1088?', '—Å' => '\\u1089?', '—Ç' => '\\u1090?',
        '—É' => '\\u1091?', '—Ñ' => '\\u1092?', '—Ö' => '\\u1093?', '—Ü' => '\\u1094?', '—á' => '\\u1095?',
        '—à' => '\\u1096?', '—â' => '\\u1097?', '—ä' => '\\u1098?', '—ã' => '\\u1099?', '—å' => '\\u1100?',
        '—ç' => '\\u1101?', '—é' => '\\u1102?', '—è' => '\\u1103?',
        '–ê' => '\\u1040?', '–ë' => '\\u1041?', '–í' => '\\u1042?', '–ì' => '\\u1043?', '–î' => '\\u1044?',
        '–ï' => '\\u1045?', '–Å' => '\\u1025?', '–ñ' => '\\u1046?', '–ó' => '\\u1047?', '–ò' => '\\u1048?',
        '–ô' => '\\u1049?', '–ö' => '\\u1050?', '–õ' => '\\u1051?', '–ú' => '\\u1052?', '–ù' => '\\u1053?',
        '–û' => '\\u1054?', '–ü' => '\\u1055?', '–†' => '\\u1056?', '–°' => '\\u1057?', '–¢' => '\\u1058?',
        '–£' => '\\u1059?', '–§' => '\\u1060?', '–•' => '\\u1061?', '–¶' => '\\u1062?', '–ß' => '\\u1063?',
        '–®' => '\\u1064?', '–©' => '\\u1065?', '–™' => '\\u1066?', '–´' => '\\u1067?', '–¨' => '\\u1068?',
        '–≠' => '\\u1069?', '–Æ' => '\\u1070?', '–Ø' => '\\u1071?',
        '‚Ññ' => '\\u8470?', '¬´' => '\\u171?', '¬ª' => '\\u187?', '‚Äì' => '\\u8211?', '‚Äî' => '\\u8212?'
    ];
    
    return str_replace(array_keys($replacements), array_values($replacements), $text);
}

echo "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
