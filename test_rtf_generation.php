<?php

require_once 'vendor/autoload.php';

echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RTF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã DOCX...\n\n";

// –¢–µ—Å—Ç–æ–≤—ã–π HTML
$testHtml = '<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –§–õ-–ò–ü</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .header { text-align: center; font-weight: bold; font-size: 14pt; margin-bottom: 20px; }
        table.border { border-collapse: collapse; width: 100%; margin: 15px 0; }
        table.border th, table.border td { border: 1px solid black; padding: 5px; }
    </style>
</head>
<body>
    <div class="header">–ê–ö–¢ –í–´–ü–û–õ–ù–ï–ù–ù–´–• –†–ê–ë–û–¢ ‚Ññ 123</div>
    <p>–≥. –ú–æ—Å–∫–≤–∞                                                         01.01.2024</p>
    
    <p>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å –ò–ü –ò–≤–∞–Ω–æ–≤, –ò–ù–ù 123456789012, –û–ì–†–ù–ò–ü 123456789012345, –∞–¥—Ä–µ—Å: –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å¬ª, —Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, –∏</p>
    
    <p>–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á, –ø–∞—Å–ø–æ—Ä—Ç: —Å–µ—Ä–∏—è 1234 ‚Ññ 567890, –≤—ã–¥–∞–Ω –û–í–î –¢–µ—Å—Ç–æ–≤–æ–µ 01.01.2010, –∫–æ–¥ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è 123-456, –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º ¬´–ó–∞–∫–∞–∑—á–∏–∫¬ª, —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Å–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π –ê–∫—Ç –æ —Ç–æ–º, —á—Ç–æ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã:</p>
    
    <table class="border">
        <tr>
            <th>‚Ññ</th>
            <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç</th>
            <th>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</th>
            <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
            <th>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É, —Ä—É–±.</th>
            <th>–°—Ç–æ–∏–º–æ—Å—Ç—å, —Ä—É–±.</th>
        </tr>
        <tr>
            <td>1</td>
            <td>–†–µ–º–æ–Ω—Ç–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é</td>
            <td>–∫–æ–º–ø–ª–µ–∫—Å</td>
            <td>1</td>
            <td>50 000</td>
            <td>50 000</td>
        </tr>
        <tr>
            <td colspan="5"><strong>–ò–¢–û–ì–û:</strong></td>
            <td><strong>50 000</strong></td>
        </tr>
    </table>
    
    <p>–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—Ç –Ω–∞ —Å—É–º–º—É: –ø—è—Ç—å–¥–µ—Å—è—Ç —Ç—ã—Å—è—á (50 000) —Ä—É–±–ª–µ–π 00 –∫–æ–ø–µ–µ–∫.</p>
    
    <p>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: _________________________ –ò–ü –ò–≤–∞–Ω–æ–≤</p>
    <p>–ó–∞–∫–∞–∑—á–∏–∫: _________________________ –ü–µ—Ç—Ä–æ–≤ –ü.–ü.</p>
</body>
</html>';

echo "=== –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –†–ê–°–®–ò–†–ï–ù–ò–ô ===\n";
echo "ZipArchive: " . (class_exists('ZipArchive') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n";
echo "XML: " . (extension_loaded('xml') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n";
echo "DOMDocument: " . (class_exists('DOMDocument') ? '‚úì –î–æ—Å—Ç—É–ø–Ω–æ' : '‚úó –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ') . "\n\n";

echo "=== –¢–ï–°–¢ RTF –ì–ï–ù–ï–†–ê–¶–ò–ò ===\n";
try {
    // –†–∞–∑–±–∏—Ä–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    $structure = parseHtmlStructure($testHtml);
    echo "‚úì HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–æ–±—Ä–∞–Ω–∞: " . count($structure) . " —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n";
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º RTF –∫–æ–Ω—Ç–µ–Ω—Ç
    $rtfContent = convertHtmlToRtf($testHtml);
    echo "‚úì RTF –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä: " . strlen($rtfContent) . " —Å–∏–º–≤–æ–ª–æ–≤\n";
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π RTF —Ñ–∞–π–ª
    $testFile = __DIR__ . '/test_document.rtf';
    file_put_contents($testFile, $rtfContent);
    echo "‚úì RTF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " . basename($testFile) . " (—Ä–∞–∑–º–µ—Ä: " . filesize($testFile) . " –±–∞–π—Ç)\n";
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ RTF —Ñ–∞–π–ª–∞
    echo "\n–ü—Ä–µ–≤—å—é RTF (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):\n";
    echo substr($rtfContent, 0, 300) . "...\n";
    
} catch (Exception $e) {
    echo "‚úó –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

echo "\n=== –ò–¢–û–ì–ò ===\n";
echo "1. RTF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: " . (isset($rtfContent) ? "‚úì –†–∞–±–æ—Ç–∞–µ—Ç" : "‚úó –û—à–∏–±–∫–∞") . "\n";
echo "2. –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: " . (file_exists($testFile ?? '') ? "‚úì –î–∞" : "‚úó –ù–µ—Ç") . "\n";
echo "3. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " . (isset($testFile) && file_exists($testFile) ? filesize($testFile) . " –±–∞–π—Ç" : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") . "\n";

if (isset($testFile) && file_exists($testFile)) {
    echo "\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n";
    echo "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª {$testFile} –≤ Microsoft Word\n";
    echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å\n";
    echo "3. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ .docx, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n";
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

function parseHtmlStructure($html) {
    $structure = [];
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º HTML
    $cleanHtml = normalizeHtml($html);
    
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (preg_match('/<div[^>]*class="header"[^>]*>(.*?)<\/div>/is', $cleanHtml, $matches)) {
        $structure[] = [
            'type' => 'header',
            'content' => strip_tags($matches[1])
        ];
    }
    
    // –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    preg_match_all('/<p[^>]*>(.*?)<\/p>/is', $cleanHtml, $paragraphs);
    foreach ($paragraphs[1] as $paragraph) {
        $text = strip_tags($paragraph);
        $text = html_entity_decode($text, ENT_QUOTES, 'UTF-8');
        $text = trim($text);
        
        if (!empty($text)) {
            $structure[] = [
                'type' => 'paragraph',
                'content' => $text
            ];
        }
    }
    
    // –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã
    preg_match_all('/<table[^>]*>(.*?)<\/table>/is', $cleanHtml, $tables);
    foreach ($tables[1] as $table) {
        $tableData = parseTableData($table);
        if (!empty($tableData)) {
            $structure[] = [
                'type' => 'table',
                'content' => $tableData
            ];
        }
    }
    
    return $structure;
}

function normalizeHtml($html) {
    $html = preg_replace('/<!DOCTYPE[^>]*>/i', '', $html);
    $html = preg_replace('/<\/?html[^>]*>/i', '', $html);
    $html = preg_replace('/<head[^>]*>.*?<\/head>/is', '', $html);
    $html = preg_replace('/<\/?body[^>]*>/i', '', $html);
    $html = preg_replace('/<style[^>]*>.*?<\/style>/is', '', $html);
    
    $html = html_entity_decode($html, ENT_QUOTES, 'UTF-8');
    $html = preg_replace('/\s+/', ' ', $html);
    
    return trim($html);
}

function parseTableData($tableHtml) {
    $tableData = [];
    
    preg_match_all('/<tr[^>]*>(.*?)<\/tr>/is', $tableHtml, $rows);
    
    foreach ($rows[1] as $row) {
        $rowData = [];
        
        preg_match_all('/<t[hd][^>]*>(.*?)<\/t[hd]>/is', $row, $cells);
        
        foreach ($cells[1] as $cell) {
            $cellText = strip_tags($cell);
            $cellText = html_entity_decode($cellText, ENT_QUOTES, 'UTF-8');
            $cellText = trim($cellText);
            $rowData[] = $cellText;
        }
        
        if (!empty($rowData)) {
            $tableData[] = $rowData;
        }
    }
    
    return $tableData;
}

function convertHtmlToRtf($html) {
    // –†–∞–∑–±–∏—Ä–∞–µ–º HTML –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    $structure = parseHtmlStructure($html);
    
    // –ù–∞—á–∏–Ω–∞–µ–º RTF –¥–æ–∫—É–º–µ–Ω—Ç
    $rtf = '{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}';
    $rtf .= '{\\colortbl;\\red0\\green0\\blue0;}';
    $rtf .= '\\viewkind4\\uc1\\pard\\f0\\fs24\\lang1049'; // –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, Times New Roman 12pt
    
    foreach ($structure as $element) {
        switch ($element['type']) {
            case 'header':
                $rtf .= convertHeaderToRtf($element['content']);
                break;
            case 'paragraph':
                $rtf .= convertParagraphToRtf($element['content']);
                break;
            case 'table':
                $rtf .= convertTableToRtf($element['content']);
                break;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
    $rtf .= '\\par\\par';
    $rtf .= '\\trowd\\trgaph108\\cellx4500\\cellx9000';
    $rtf .= '\\intbl –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\\par\\par_______________________\\cell';
    $rtf .= '\\intbl –ó–∞–∫–∞–∑—á–∏–∫:\\par\\par_______________________\\cell';
    $rtf .= '\\row\\par';
    $rtf .= '\\fs20\\i –ú.–ü. (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–µ—á–∞—Ç–∏)\\i0\\fs24\\par';
    
    $rtf .= '}'; // –ó–∞–∫—Ä—ã–≤–∞–µ–º RTF –¥–æ–∫—É–º–µ–Ω—Ç
    
    return $rtf;
}

function convertHeaderToRtf($content) {
    $escapedContent = escapeRtfText($content);
    return '\\par\\qc\\b\\fs28 ' . $escapedContent . '\\b0\\fs24\\par\\par';
}

function convertParagraphToRtf($content) {
    $escapedContent = escapeRtfText($content);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ –≥–æ—Ä–æ–¥ –∏ –¥–∞—Ç—É
    if (preg_match('/–≥\.\s*([^0-9]*?)\s+(\d{2}\.\d{2}\.\d{4})/', $content)) {
        return '\\par\\qj ' . $escapedContent . '\\par';
    } else {
        return '\\par\\qj\\fi567 ' . $escapedContent . '\\par'; // –° –∫—Ä–∞—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    }
}

function convertTableToRtf($tableData) {
    $rtf = '\\par';
    
    foreach ($tableData as $rowIndex => $rowData) {
        $rtf .= '\\trowd\\trgaph108\\trleft-108'; // –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        $cellWidth = 2400; // –ë–∞–∑–æ–≤–∞—è —à–∏—Ä–∏–Ω–∞ —è—á–µ–π–∫–∏
        $cellPosition = 0;
        
        foreach ($rowData as $cellIndex => $cellData) {
            $cellPosition += $cellWidth;
            $rtf .= '\\cellx' . $cellPosition;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–µ–∫
        foreach ($rowData as $cellIndex => $cellData) {
            $escapedContent = escapeRtfText($cellData);
            
            if ($rowIndex === 0) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã - –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
                $rtf .= '\\intbl\\qc\\b ' . $escapedContent . '\\b0\\cell';
            } else {
                $rtf .= '\\intbl\\qc ' . $escapedContent . '\\cell';
            }
        }
        
        $rtf .= '\\row'; // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
    }
    
    $rtf .= '\\par';
    return $rtf;
}

function escapeRtfText($text) {
    // RTF —Ç—Ä–µ–±—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    $text = str_replace('\\', '\\\\', $text);
    $text = str_replace('{', '\\{', $text);
    $text = str_replace('}', '\\}', $text);
    
    // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è RTF
    $replacements = [
        '–∞' => '\\u1072?', '–±' => '\\u1073?', '–≤' => '\\u1074?', '–≥' => '\\u1075?', '–¥' => '\\u1076?',
        '–µ' => '\\u1077?', '—ë' => '\\u1105?', '–∂' => '\\u1078?', '–∑' => '\\u1079?', '–∏' => '\\u1080?',
        '–π' => '\\u1081?', '–∫' => '\\u1082?', '–ª' => '\\u1083?', '–º' => '\\u1084?', '–Ω' => '\\u1085?',
        '–æ' => '\\u1086?', '–ø' => '\\u1087?', '—Ä' => '\\u1088?', '—Å' => '\\u1089?', '—Ç' => '\\u1090?',
        '—É' => '\\u1091?', '—Ñ' => '\\u1092?', '—Ö' => '\\u1093?', '—Ü' => '\\u1094?', '—á' => '\\u1095?',
        '—à' => '\\u1096?', '—â' => '\\u1097?', '—ä' => '\\u1098?', '—ã' => '\\u1099?', '—å' => '\\u1100?',
        '—ç' => '\\u1101?', '—é' => '\\u1102?', '—è' => '\\u1103?',
        '–ê' => '\\u1040?', '–ë' => '\\u1041?', '–í' => '\\u1042?', '–ì' => '\\u1043?', '–î' => '\\u1044?',
        '–ï' => '\\u1045?', '–Å' => '\\u1025?', '–ñ' => '\\u1046?', '–ó' => '\\u1047?', '–ò' => '\\u1048?',
        '–ô' => '\\u1049?', '–ö' => '\\u1050?', '–õ' => '\\u1051?', '–ú' => '\\u1052?', '–ù' => '\\u1053?',
        '–û' => '\\u1054?', '–ü' => '\\u1055?', '–†' => '\\u1056?', '–°' => '\\u1057?', '–¢' => '\\u1058?',
        '–£' => '\\u1059?', '–§' => '\\u1060?', '–•' => '\\u1061?', '–¶' => '\\u1062?', '–ß' => '\\u1063?',
        '–®' => '\\u1064?', '–©' => '\\u1065?', '–™' => '\\u1066?', '–´' => '\\u1067?', '–¨' => '\\u1068?',
        '–≠' => '\\u1069?', '–Æ' => '\\u1070?', '–Ø' => '\\u1071?'
    ];
    
    return str_replace(array_keys($replacements), array_values($replacements), $text);
}

echo "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n";
